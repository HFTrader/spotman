#!/usr/bin/env python3
"""
SpotMan - AWS EC2 Instance Manager
A comprehensive tool for managing AWS EC2 instances with application class tagging.
Frontend script that uses the SpotMan core library.
"""

import argparse
import sys
import time
from typing import Dict, List

# Import the core functionality
from spotman_core import AWSInstanceManager


def format_instances_table(instances: List[Dict]) -> None:
    """Format and print instances in a table."""
    if not instances:
        print("No instances found.")
        return
    
    headers = ['Name', 'Instance ID', 'Type', 'State', 'Public IP', 'App Class', 'Profile']
    
    # Calculate column widths
    widths = [len(h) for h in headers]
    for instance in instances:
        widths[0] = max(widths[0], len(instance['Name']))
        widths[1] = max(widths[1], len(instance['InstanceId']))
        widths[2] = max(widths[2], len(instance['InstanceType']))
        widths[3] = max(widths[3], len(instance['State']))
        widths[4] = max(widths[4], len(instance['PublicIpAddress']))
        widths[5] = max(widths[5], len(instance['ApplicationClass']))
        widths[6] = max(widths[6], len(instance['Profile']))
    
    # Print header
    header_line = ' | '.join(h.ljust(w) for h, w in zip(headers, widths))
    print(header_line)
    print('-' * len(header_line))
    
    # Print instances
    for instance in instances:
        row = [
            instance['Name'].ljust(widths[0]),
            instance['InstanceId'].ljust(widths[1]),
            instance['InstanceType'].ljust(widths[2]),
            instance['State'].ljust(widths[3]),
            instance['PublicIpAddress'].ljust(widths[4]),
            instance['ApplicationClass'].ljust(widths[5]),
            instance['Profile'].ljust(widths[6])
        ]
        print(' | '.join(row))
    
    print(f"\nTotal: {len(instances)} instance(s)")


def format_profiles_table(profiles: List[str], manager: AWSInstanceManager) -> None:
    """Format and print profiles in a table."""
    if not profiles:
        print("No profiles found.")
        return
    
    print("Available Profiles:")
    print("=" * 50)
    
    for profile_name in profiles:
        try:
            profile = manager.get_profile(profile_name)
            if profile:
                instance_type = profile.get('instance_type', 'Not specified')
                spot_instance = profile.get('spot_instance', False)
                hibernation = profile.get('hibernation_enabled', False)
                os_type = profile.get('os_type', 'ubuntu')
                
                print(f"\nüìã {profile_name}")
                print(f"   Instance Type: {instance_type}")
                print(f"   OS Type: {os_type}")
                print(f"   Spot Instance: {'‚úÖ Yes' if spot_instance else '‚ùå No'}")
                print(f"   Hibernation: {'‚úÖ Yes' if hibernation else '‚ùå No'}")
                
                # Show port forwarding if configured
                port_forwards = profile.get('ssh_port_forwards', [])
                if port_forwards:
                    print(f"   Port Forwarding:")
                    for forward in port_forwards:
                        local_port = forward.get('local_port')
                        remote_port = forward.get('remote_port', local_port)
                        remote_host = forward.get('remote_host', 'localhost')
                        print(f"     {local_port} -> {remote_host}:{remote_port}")
                
                # Show application class if specified
                app_class = profile.get('tags', {}).get('ApplicationClass')
                if app_class:
                    print(f"   Default App Class: {app_class}")
            else:
                print(f"\n‚ùå {profile_name} (Error loading)")
        except Exception as e:
            print(f"\n‚ùå {profile_name} (Error: {e})")
    
    print(f"\nTotal: {len(profiles)} profile(s)")


def main():
    """Main entry point for SpotMan CLI."""
    parser = argparse.ArgumentParser(
        description='SpotMan - AWS EC2 Instance Manager with Application Class Support',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s create --profile web-server --name web01 --class web
  %(prog)s create --profile spot-hibernation --name spot01 --class spot
  %(prog)s list --class web --state running
  %(prog)s start web01
  %(prog)s stop web01
  %(prog)s hibernate spot01
  %(prog)s resume spot01
  %(prog)s update-ssh --class web
  %(prog)s terminate web01
  %(prog)s list-profiles
        """
    )
    
    parser.add_argument('--region', help='AWS region')
    parser.add_argument('--aws-profile', help='AWS profile to use')
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Create command
    create_parser = subparsers.add_parser('create', help='Create a new instance')
    create_parser.add_argument('--profile', required=True, help='Profile to use')
    create_parser.add_argument('--name', required=True, help='Instance name')
    create_parser.add_argument('--class', help='Application class tag')
    create_parser.add_argument('--spot-price', type=float, help='Maximum spot price')
    create_parser.add_argument('--dry-run', action='store_true', help='Validate without creating')
    
    # List command
    list_parser = subparsers.add_parser('list', help='List instances')
    list_parser.add_argument('--class', help='Filter by application class')
    list_parser.add_argument('--state', help='Filter by state')
    list_parser.add_argument('--profile', help='Filter by profile')
    
    # Start command
    start_parser = subparsers.add_parser('start', help='Start an instance')
    start_parser.add_argument('instance', help='Instance name or ID')
    
    # Stop command
    stop_parser = subparsers.add_parser('stop', help='Stop an instance')
    stop_parser.add_argument('instance', help='Instance name or ID')
    
    # Hibernate command
    hibernate_parser = subparsers.add_parser('hibernate', help='Hibernate an instance')
    hibernate_parser.add_argument('instance', help='Instance name or ID')
    
    # Resume command
    resume_parser = subparsers.add_parser('resume', help='Resume a hibernated instance')
    resume_parser.add_argument('instance', help='Instance name or ID')
    
    # Terminate command
    terminate_parser = subparsers.add_parser('terminate', help='Terminate an instance')
    terminate_parser.add_argument('instance', help='Instance name or ID')
    
    # Hibernation status command
    status_parser = subparsers.add_parser('hibernation-status', help='Check hibernation status')
    status_parser.add_argument('instance', help='Instance name or ID')
    
    # Update SSH command
    ssh_parser = subparsers.add_parser('update-ssh', help='Update SSH configuration')
    ssh_parser.add_argument('--instance', help='Specific instance to update')
    ssh_parser.add_argument('--class', help='Update instances with this application class')
    ssh_parser.add_argument('--profile', help='Update instances with this profile')
    
    # List profiles command
    profiles_parser = subparsers.add_parser('list-profiles', help='List available profiles')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Initialize the manager
    try:
        manager = AWSInstanceManager(region=args.region, profile=args.aws_profile)
    except Exception as e:
        print(f"Error initializing SpotMan: {e}")
        sys.exit(1)
    
    # Execute commands
    if args.command == 'create':
        app_class = getattr(args, 'class', None)
        if not app_class:
            print("Warning: No application class specified. Use --class or add it to the profile.")
        
        instance_id = manager.create_instance(
            args.profile, 
            args.name, 
            app_class, 
            args.spot_price, 
            args.dry_run
        )
        
        if instance_id and not args.dry_run:
            print(f"Instance created: {instance_id}")
    
    elif args.command == 'list':
        app_class = getattr(args, 'class', None)
        instances = manager.list_instances(
            app_class=app_class,
            state=args.state,
            profile_name=args.profile
        )
        format_instances_table(instances)
    
    elif args.command == 'start':
        manager.start_instance(args.instance)
    
    elif args.command == 'stop':
        manager.stop_instance(args.instance)
    
    elif args.command == 'hibernate':
        manager.hibernate_instance(args.instance)
    
    elif args.command == 'resume':
        manager.resume_hibernated_instance(args.instance)
    
    elif args.command == 'terminate':
        manager.terminate_instance(args.instance)
    
    elif args.command == 'hibernation-status':
        manager.check_hibernation_status(args.instance)
    
    elif args.command == 'update-ssh':
        app_class = getattr(args, 'class', None)
        manager.update_ssh_config(
            instance_id=args.instance,
            profile_name=args.profile,
            app_class=app_class
        )
    
    elif args.command == 'list-profiles':
        profiles = manager.list_profiles()
        format_profiles_table(profiles, manager)


if __name__ == '__main__':
    main()