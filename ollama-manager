#!/usr/bin/env python3
"""
SpotMan Ollama Manager
Enhanced Ollama instance management integrated with SpotMan framework.
Provides dedicated Ollama server management while leveraging SpotMan's infrastructure.
"""

import argparse
import os
import sys
import time
import subprocess
from pathlib import Path
from typing import Dict, List, Optional
import yaml
import boto3
from botocore.exceptions import ClientError

# Import SpotMan's AWSInstanceManager for core functionality
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
from spotman import AWSInstanceManager


class OllamaManager:
    """Enhanced Ollama instance manager that integrates with SpotMan framework."""
    
    def __init__(self, region: str = None, profile: str = None):
        """Initialize the Ollama manager with SpotMan integration."""
        self.spotman = AWSInstanceManager(region=region, profile=profile)
        self.region = self.spotman.region
        self.ec2_client = self.spotman.ec2_client
    
    def create_ollama_instance(self, name: str = None, instance_type: str = None, 
                             spot: bool = True) -> Optional[str]:
        """Create a new Ollama instance using SpotMan framework."""
        if not name:
            name = f"ollama-{int(time.time())}"
        
        print(f"Creating Ollama instance: {name}")
        
        # Use the ollama-spot profile by default
        profile_name = "ollama-spot"
        
        # Override instance type if specified
        if instance_type:
            # Create a temporary profile with the custom instance type
            profile = self.spotman.load_profile(profile_name)
            profile['instance_type'] = instance_type
            
            # Save temporary profile
            temp_profile_path = f"/tmp/ollama-custom-{int(time.time())}.yaml"
            with open(temp_profile_path, 'w') as f:
                yaml.dump(profile, f)
            
            print(f"Using custom instance type: {instance_type}")
            
            # Load from temporary profile
            profile_name = temp_profile_path.replace('.yaml', '').split('/')[-1]
            
            # Copy to profiles directory temporarily
            script_dir = os.path.dirname(os.path.abspath(__file__))
            temp_dest = os.path.join(script_dir, 'profiles', f'{profile_name}.yaml')
            os.makedirs(os.path.dirname(temp_dest), exist_ok=True)
            
            import shutil
            shutil.copy2(temp_profile_path, temp_dest)
            
            try:
                instance_id = self.spotman.create_instance(profile_name, name, "ollama")
                return instance_id
            finally:
                # Clean up temporary profile
                try:
                    os.remove(temp_dest)
                    os.remove(temp_profile_path)
                except:
                    pass
        else:
            # Use default profile
            return self.spotman.create_instance(profile_name, name, "ollama")
    
    def list_ollama_instances(self) -> List[Dict]:
        """List all Ollama instances."""
        return self.spotman.list_instances(app_class="ollama")
    
    def get_ollama_instance_status(self, instance_identifier: str) -> Optional[Dict]:
        """Get detailed status of an Ollama instance."""
        instance_id = self.spotman._resolve_instance_identifier(instance_identifier)
        if not instance_id:
            return None
        
        instances = self.list_ollama_instances()
        for instance in instances:
            if instance['InstanceId'] == instance_id:
                return instance
        
        print(f"Instance {instance_identifier} is not an Ollama instance")
        return None
    
    def start_ollama_instance(self, instance_identifier: str) -> bool:
        """Start/resume an Ollama instance."""
        return self.spotman.resume_hibernated_instance(instance_identifier)
    
    def stop_ollama_instance(self, instance_identifier: str, hibernate: bool = True) -> bool:
        """Stop/hibernate an Ollama instance."""
        if hibernate:
            return self.spotman.hibernate_instance(instance_identifier)
        else:
            return self.spotman.stop_instance(instance_identifier)
    
    def terminate_ollama_instance(self, instance_identifier: str) -> bool:
        """Terminate an Ollama instance."""
        return self.spotman.terminate_instance(instance_identifier)
    
    def check_ollama_hibernation_status(self, instance_identifier: str) -> None:
        """Check hibernation status of an Ollama instance."""
        self.spotman.check_hibernation_status(instance_identifier)
    
    def update_ollama_ssh_config(self, instance_identifier: str = None) -> bool:
        """Update SSH config for Ollama instances (includes port forwarding)."""
        if instance_identifier:
            instance_id = self.spotman._resolve_instance_identifier(instance_identifier)
            if not instance_id:
                return False
            return self.spotman.update_ssh_config(instance_id=instance_id)
        else:
            return self.spotman.update_ssh_config(app_class="ollama")
    
    def connect_to_ollama(self, instance_identifier: str, port: int = 11434) -> None:
        """Connect to Ollama instance via SSH with port forwarding."""
        instance_id = self.spotman._resolve_instance_identifier(instance_identifier)
        if not instance_id:
            return
        
        # Get instance details
        try:
            response = self.ec2_client.describe_instances(InstanceIds=[instance_id])
            instance = response['Reservations'][0]['Instances'][0]
            
            if instance['State']['Name'] != 'running':
                print(f"Instance {instance_identifier} is not running. Current state: {instance['State']['Name']}")
                print("Use 'start' command to start the instance first.")
                return
            
            public_ip = instance.get('PublicIpAddress')
            if not public_ip:
                print("Instance has no public IP address.")
                return
            
            # Get SSH key
            key_name = instance.get('KeyName')
            identity_file = "~/.ssh/your-key.pem"  # Default fallback
            
            if key_name and self.spotman.regions_config and 'ssh_keys' in self.spotman.regions_config:
                ssh_keys = self.spotman.regions_config['ssh_keys']
                if key_name in ssh_keys:
                    identity_file = ssh_keys[key_name]
            
            # Check if SSH config entry exists
            ssh_config_path = self.spotman._get_spotman_ssh_config_path()
            host_name = instance_identifier if not instance_identifier.startswith('i-') else f"ollama-{instance_id}"
            
            if self.spotman._check_ssh_config_exists(host_name, ssh_config_path):
                print(f"Connecting to {host_name} with automatic port forwarding...")
                print(f"Ollama API will be available at: http://localhost:{port}")
                print(f"Press Ctrl+C to disconnect")
                subprocess.run(['ssh', host_name])
            else:
                print(f"SSH config not found. Connecting directly...")
                print(f"Port forwarding: {port}:localhost:{port}")
                print(f"Ollama API will be available at: http://localhost:{port}")
                print(f"Press Ctrl+C to disconnect")
                
                ssh_cmd = [
                    'ssh', '-i', os.path.expanduser(identity_file),
                    '-L', f'{port}:localhost:{port}',
                    '-o', 'StrictHostKeyChecking=no',
                    f'ubuntu@{public_ip}'
                ]
                subprocess.run(ssh_cmd)
        
        except ClientError as e:
            print(f"Error connecting to instance: {e}")
    
    def test_ollama_connection(self, instance_identifier: str, local_port: int = 11434) -> bool:
        """Test if Ollama service is accessible via port forwarding."""
        import requests
        import socket
        
        # Check if local port is being forwarded
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            result = sock.connect_ex(('localhost', local_port))
            sock.close()
            
            if result != 0:
                print(f"Port {local_port} is not open locally.")
                print(f"Make sure you're connected to {instance_identifier} with SSH port forwarding.")
                print(f"Use: ollama-manager connect {instance_identifier}")
                return False
            
            # Test Ollama API
            try:
                response = requests.get(f'http://localhost:{local_port}/api/version', timeout=5)
                if response.status_code == 200:
                    version_info = response.json()
                    print(f"✅ Ollama connection successful!")
                    print(f"   Version: {version_info.get('version', 'unknown')}")
                    return True
                else:
                    print(f"❌ Ollama API returned status code: {response.status_code}")
                    return False
            except requests.RequestException as e:
                print(f"❌ Ollama API connection failed: {e}")
                return False
                
        except Exception as e:
            print(f"❌ Connection test failed: {e}")
            return False
    
    def show_ollama_logs(self, instance_identifier: str) -> None:
        """Show Ollama service logs from the instance."""
        host_name = instance_identifier if not instance_identifier.startswith('i-') else f"ollama-{instance_identifier}"
        
        print(f"Showing Ollama logs from {host_name}...")
        print("Press Ctrl+C to exit")
        
        try:
            subprocess.run([
                'ssh', host_name, 
                'sudo journalctl -u ollama -f --no-pager'
            ])
        except KeyboardInterrupt:
            print("\nLog viewing stopped.")
        except subprocess.CalledProcessError as e:
            print(f"Error accessing logs: {e}")
            print("Make sure the instance is running and SSH config is set up.")


def format_ollama_instances_table(instances: List[Dict]) -> None:
    """Format and print Ollama instances in a table."""
    if not instances:
        print("No Ollama instances found.")
        return
    
    print(f"\nOllama LLM Instances:")
    headers = ['Name', 'Instance ID', 'Type', 'State', 'Public IP', 'Launch Time']
    
    # Calculate column widths
    widths = [len(h) for h in headers]
    for instance in instances:
        widths[0] = max(widths[0], len(instance['Name']))
        widths[1] = max(widths[1], len(instance['InstanceId']))
        widths[2] = max(widths[2], len(instance['InstanceType']))
        widths[3] = max(widths[3], len(instance['State']))
        widths[4] = max(widths[4], len(instance['PublicIpAddress']))
        widths[5] = max(widths[5], 19)  # For timestamp display
    
    # Print header
    header_line = ' | '.join(h.ljust(w) for h, w in zip(headers, widths))
    print(header_line)
    print('-' * len(header_line))
    
    # Print instances
    for instance in instances:
        launch_time = instance['LaunchTime'].strftime('%Y-%m-%d %H:%M:%S') if instance['LaunchTime'] else 'N/A'
        row = [
            instance['Name'].ljust(widths[0]),
            instance['InstanceId'].ljust(widths[1]),
            instance['InstanceType'].ljust(widths[2]),
            instance['State'].ljust(widths[3]),
            instance['PublicIpAddress'].ljust(widths[4]),
            launch_time.ljust(widths[5])
        ]
        print(' | '.join(row))
    
    print(f"\nTotal: {len(instances)} Ollama instance(s)")
    
    # Show connection info for running instances
    running_instances = [i for i in instances if i['State'] == 'running']
    if running_instances:
        print("\n📡 Connection Commands:")
        for instance in running_instances:
            name = instance['Name'] if instance['Name'] != 'N/A' else instance['InstanceId']
            print(f"   ssh {name}  # Connect with port forwarding")
        print("\n🌐 Ollama API: http://localhost:11434 (when connected via SSH)")


def main():
    """Main entry point for SpotMan Ollama Manager."""
    parser = argparse.ArgumentParser(
        description='SpotMan Ollama Manager - Enhanced Ollama instance management',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s create --name ollama01                    # Create new Ollama instance
  %(prog)s create --name ollama-gpu --type g5.xlarge # Create with specific instance type
  %(prog)s list                                      # List all Ollama instances
  %(prog)s start ollama01                           # Start/resume Ollama instance
  %(prog)s stop ollama01                            # Hibernate Ollama instance
  %(prog)s stop ollama01 --no-hibernate             # Stop without hibernation
  %(prog)s status ollama01                          # Show instance status
  %(prog)s connect ollama01                         # SSH connect with port forwarding
  %(prog)s test ollama01                            # Test Ollama API connection
  %(prog)s logs ollama01                            # Show Ollama service logs
  %(prog)s update-ssh                               # Update SSH config for all Ollama instances
  %(prog)s terminate ollama01                       # Terminate instance
        """
    )
    
    parser.add_argument('--region', help='AWS region')
    parser.add_argument('--aws-profile', help='AWS profile to use')
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Create command
    create_parser = subparsers.add_parser('create', help='Create a new Ollama instance')
    create_parser.add_argument('--name', help='Instance name (auto-generated if not specified)')
    create_parser.add_argument('--type', help='Instance type (default: g5.xlarge)')
    create_parser.add_argument('--no-spot', action='store_true', help='Use on-demand instead of spot')
    
    # List command
    list_parser = subparsers.add_parser('list', help='List all Ollama instances')
    
    # Start command
    start_parser = subparsers.add_parser('start', help='Start/resume an Ollama instance')
    start_parser.add_argument('instance', help='Instance name or ID')
    
    # Stop command
    stop_parser = subparsers.add_parser('stop', help='Stop/hibernate an Ollama instance')
    stop_parser.add_argument('instance', help='Instance name or ID')
    stop_parser.add_argument('--no-hibernate', action='store_true', help='Stop without hibernation')
    
    # Status command
    status_parser = subparsers.add_parser('status', help='Show Ollama instance status')
    status_parser.add_argument('instance', help='Instance name or ID')
    
    # Connect command
    connect_parser = subparsers.add_parser('connect', help='SSH connect with port forwarding')
    connect_parser.add_argument('instance', help='Instance name or ID')
    connect_parser.add_argument('--port', type=int, default=11434, help='Local port for forwarding (default: 11434)')
    
    # Test command
    test_parser = subparsers.add_parser('test', help='Test Ollama API connection')
    test_parser.add_argument('instance', help='Instance name or ID')
    test_parser.add_argument('--port', type=int, default=11434, help='Local port to test (default: 11434)')
    
    # Logs command
    logs_parser = subparsers.add_parser('logs', help='Show Ollama service logs')
    logs_parser.add_argument('instance', help='Instance name or ID')
    
    # Update SSH command
    ssh_parser = subparsers.add_parser('update-ssh', help='Update SSH config for Ollama instances')
    ssh_parser.add_argument('instance', nargs='?', help='Specific instance to update (optional)')
    
    # Terminate command
    terminate_parser = subparsers.add_parser('terminate', help='Terminate an Ollama instance')
    terminate_parser.add_argument('instance', help='Instance name or ID')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Initialize manager
    manager = OllamaManager(region=args.region, profile=args.aws_profile)
    
    # Execute commands
    if args.command == 'create':
        manager.create_ollama_instance(
            name=args.name, 
            instance_type=args.type,
            spot=not args.no_spot
        )
    
    elif args.command == 'list':
        instances = manager.list_ollama_instances()
        format_ollama_instances_table(instances)
    
    elif args.command == 'start':
        manager.start_ollama_instance(args.instance)
    
    elif args.command == 'stop':
        manager.stop_ollama_instance(args.instance, hibernate=not args.no_hibernate)
    
    elif args.command == 'status':
        instance = manager.get_ollama_instance_status(args.instance)
        if instance:
            print(f"\nOllama Instance Status:")
            print(f"  Name: {instance['Name']}")
            print(f"  ID: {instance['InstanceId']}")
            print(f"  Type: {instance['InstanceType']}")
            print(f"  State: {instance['State']}")
            print(f"  Public IP: {instance['PublicIpAddress']}")
            print(f"  Launch Time: {instance['LaunchTime']}")
            
            if instance['State'] == 'running':
                print(f"\n📡 Connection: ssh {instance['Name'] if instance['Name'] != 'N/A' else instance['InstanceId']}")
                print(f"🌐 Ollama API: http://localhost:11434 (when connected)")
            
            print()
            manager.check_ollama_hibernation_status(args.instance)
    
    elif args.command == 'connect':
        manager.connect_to_ollama(args.instance, args.port)
    
    elif args.command == 'test':
        manager.test_ollama_connection(args.instance, args.port)
    
    elif args.command == 'logs':
        manager.show_ollama_logs(args.instance)
    
    elif args.command == 'update-ssh':
        manager.update_ollama_ssh_config(args.instance)
    
    elif args.command == 'terminate':
        manager.terminate_ollama_instance(args.instance)


if __name__ == '__main__':
    main()